---
title: "Mosquito-mediated epidemiological effects of malarone treatment"
number-sections: true
format:
  html:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
bibliography: references.bib
csl: the-american-naturalist.csl
---

```{r include = FALSE}
par2 <- function(...) par(..., mgp = c(1.5, .5, 0), bty = "n")

knitr::knit_hooks$set(
  margin1 = function(before, options, envir) {
    if (before) par2(plt = c(.105, .97, .15, .95)) else NULL
  },
  margin2 = function(before, options, envir) {
    if (before) par2(plt = c(.22, .97, .15, .95)) else NULL
  },
  margin3 = function(before, options, envir) {
    if (before) par2(plt = c(.25, .95, .19, .9)) else NULL
  })

eps <- .8
knitr::opts_chunk$set(margin1    = TRUE,
                      fig.retina = 2,
                      fig.align  = "center",
                      fig.height = eps * 5, # default is 5
                      fig.width = eps * 7) # default is 7
```

In this analysis we use the formalism of @smith_statics_2004.

## Parameters

The path to the data:

```{r}
path2data <- paste0(Sys.getenv("HOME"), "/Library/CloudStorage/",
                    "OneDrive-OxfordUniversityClinicalResearchUnit/",
                    "GitHub/choisy/malarone/")
```

```{r include = FALSE}
make_path <- function(x) paste0(path2data, "cache/", x)
file_exists <- function(x) file.exists(make_path(x))
readRDS3 <- function(x) readRDS(make_path(x))
saveRDS2 <- function(object, file) saveRDS(object, make_path(file))
```

Whether or not to force the effects to be equal to $0$ at $t = 28$ days (in practice it
does not change things much anyway):

```{r}
t28_0 <- TRUE
```

## Packages

Required packages:

```{r}
required_packages <- c("readr", "readxl", "dplyr", "purrr", "stringr", "tibble")
```

Installing those that are not installed:

```{r}
to_inst <- required_packages[! required_packages %in% installed.packages()[,"Package"]]
if (length(to_inst)) install.packages(to_inst)
```

Loading some for interactive use:

```{r message = FALSE}
library(dplyr)
library(purrr)
```


## Functions

Tuning some base functions:

```{r}
lwd_val <- 2
seq2 <- function(...) seq(..., le = 512)
abline2 <- function(...) abline(..., col = "grey")
lines2 <- function(...) lines(..., col = 2, lwd = lwd_val)
segments2 <- function(...) segments(..., col = 4, lwd = lwd_val)
plot2 <- function(...) plot(..., col = 4, pch = 3, lwd = lwd_val)
plotl <- function(...) plot(..., type = "l", col = 2, lwd = lwd_val)
arrows2 <- function(...) arrows(..., col = 3, length = .15, lwd = lwd_val)
readRDS2 <- function(f, ...) tibble::as_tibble(readRDS(paste0(path2data, f), ...))
```

A function that performs numerical integration using the trapezoid method:

```{r}
trapezoid <- function(f, lower, upper, nb = 1e4) {
  step <- (upper - lower) / nb
  y <- f(seq(lower, upper, le = nb + 1))
  step * (y[1] + 2 * sum(y[-1])) / 2
}
```


## Theoretical results

In this section we pull out the most relevant theoretical results from
@smith_statics_2004.

The **individual vectorial capacity** (noted $IC$ in @smith_statics_2004 but noted $C$
here) is defined by @saul_cyclical_1990 as the expected number of infectious bites from
a single vector after feeding on an infectious host and reads:

$$
C = c \cdot P_e \cdot S
$$

where $c$ is the **transmission efficiency from human to mosquito** (*i.e.* probability
of becoming infected after feeding on an infectious human), $P_e$ is the
**probability of becoming infectious for an infected mosquito**:

$$
P_e = e^{-gn}
$$
(with $g$ the **mosquito death rate** and $n$ the **EIP**), and $S$ is the
**stability index**, *i.e.* the total number of bites per mosquito during its lifetime:

$$
S = \frac{a}{g}
$$

with $a$ the **mosquito biting rate**, *i.e.* the number of bites per mosquito.
Gathering everything gives:

$$
C = c \cdot e^{-gn}\frac{a}{g}
$$

The **basic reproduction ratio** is the expected number of infected humans per infected
human or, equivalently, the expected number of infected mosquitoes per infected 
mosquito and can be expressed as:

$$
R_0 = \frac{C \cdot b \cdot a \cdot m}{r}
$$

where $C$ is the above-defined individual vectorial capacity, $b$ is the
**transmission efficiency from mosquito to human**, $r$ is the
**recovery rate of humans**, and $m$ is the **ratio of mosquitoes to humans**.

Finally, the proportion $\bar{X}$ of infected humans at equilibrium can be expressed as
a function of $R_0$:

$$
\bar{X} = \frac{R_0 - 1}{R_0 + c S}
$$

## Experimental data

The experimental results suggest that malarone

1. decreases by the multiplicative factor $1 - \alpha$ ($0 \leq \alpha \leq 1$) the
number of mosquitoes with sporozoites (with $\alpha$ shown on the $y$ axis of
Figure 3B);
2. decreases by the multiplicative factor $1 - \beta$ ($0 \leq \beta \leq 1$) the
sporozoites load in mosquitoes still harboring sporozoites (with $\beta$ shown on
the $y$ axis of Figure 4B);
3. decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$) the
size of oocysts at 7 days post infection (with $\gamma$ shown on the $y$ axis of Figure
5A);
4. has no effect on the mosquito biting rate $a$ (Figure 7A);
5. has no effect on the mosquito death rate $g$ (Figure 7B).

Let's see below how we can integrate these 3 effects $\alpha$, $\beta$ and $\gamma$
into the theoretical equations of the previous section.


### TBA on sporozoites

The transmission-blocking activity on sporozoites converts directly into a similar
reduction of the mean individual vectorial capacity:

$$
(1 - \alpha(t))\cdot C
$$

where $C$ is the vectorial capacity in absence of malarone and $t$ is the time post
drug administration. Below we generate the function $\alpha(t)$ from the experimental
data of Figure 3B. First we need a function that reads experimental data for the
treatment group:

```{r}
make_reading_exp_data <- function() {
  hours <- c(0, 5, 48, 72)
  days <- c(5, 7, 14, 28)
  hash <- c(setNames(hours, paste0("H", hours)),
            setNames(24 * days, paste0("D", days)))
  function(file) {
    file |>
      readRDS2() |> 
      filter(treatment == "AL+AP") |> 
      mutate(time_hours = hash[stringr::str_remove(time_points, "0")],
             across(Inhibition, ~ .x / 100))
  }
}

reading_exp_data <- make_reading_exp_data()
```

We also need a function that converts such experimental data into a function:

```{r}
data2function <- function(data, correction = t28_0) {
  apply_correction <- function(x) {
    if (correction) return(mutate(x, median_val = c(head(median_val, -1), 0)))
    x
  }
  
  data |> 
    group_by(time_hours) |> 
    summarise(median_val = max(0, median(Inhibition))) |> 
    bind_rows(tibble(time_hours = 0, median_val = 0)) |> 
    arrange(time_hours) |> 
    apply_correction() |> 
    with(approxfun(time_hours, median_val))
}
```

where `correction = TRUE` means that the value at $t = 28$ days is forced to be equal
to $0$. Let's now pull out the data from Figure 3B:

```{r}
sporozoitsTBA <- reading_exp_data("percentage_inhibition9.rds")
```

and create a function `alpha()` of the percentage $\alpha(t)$ inhibition on sporozoite
infection rate as a function of time $t$ post drug administration:

```{r}
alpha <- data2function(sporozoitsTBA)
```

Let's now visualize this function. For that we first need a function that plots
experimental data:

```{r}
plot_experimental_data <- function(data, ...) {
  with(data, plot2(jitter(time_hours), Inhibition,
                   xlab = "time post drug administration (hours)", ...))
  abline(h = 0)
}
```

With this function `plot_experimental_data()` defined, this is what the $\alpha(t)$
function coded in `alpha()` looks like together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTBA, ylim = c(-1, 1),
                       ylab = bquote(.("sporozoite TBA") ~ alpha))
xs <- seq2(0, 700)
lines2(xs, alpha(xs))
```


### TRA on sporozoites

The transmission-reducing activity on sporozoites reads

$$
(1 - \beta(t))\cdot L
$$

where $L$ is the sporozoite load in absence of malarone. Figure 2B from
@aleshnick_experimental_2020 suggests a non-linear relationship between the sporozoite
load and the transmission efficiency from mosquito to human. The effect of $\beta$ on
$b$ is thus modelled as so:

$$
\frac{f((1 - \beta(t))L)}{f(L)}b
$$

where $b$ is the mosquito-to-human transmission efficiency in absence of malarone and 
$f$ is the functional relationship between the sporozoite load and the
mosquito-to-human transmission efficiency documented on Figure 2B of
@aleshnick_experimental_2020 and that we reproduce here:

```{r}
make_f <- function(x1, x2, y1, y2) {
  function(x) {
    purrr::map_dbl(x, function(x) {
                        if (x < x1) return(x * y1 / x1)
                        y1 + (x - x1) * (y2 - y1) / (x2 - x1)
                      })
  }
}

f <- make_f(x1 = 21111, x2 = 1e5, y1 = .285, y2 = .344)
```

And this is what this function $f$ coded in `f()` looks like:

```{r}
xs2 <- seq2(0, 1e5)
plotl(xs2, f(xs2),
      xlab = "salivary gland sporozoite load", ylab = "infection probability")
```

With this defined, let's now pull out the data from Figure 4B:

```{r}
sporozoitsTRA <- reading_exp_data("newTRA.rds")
```

and create a function `beta(t)` on the percentage  $\beta(t)$ inhibition on sporozoite
intensity as a function of time $t$ post drug administration:

```{r}
beta <- data2function(sporozoitsTRA)
```

And let's visualize this function $\beta(t)$ together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTRA, ylim = c(-1, 1),
                       ylab = bquote("sporozoite TRA" ~ beta))
lines2(xs, beta(xs))
```


### Increase of the EIP

Malarone decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$)
the size of oocysts at 7 dpi. Furthermore, figure 5B from @werling_steroid_2019
suggests a linear relationship between the development time and the oocyst size. By
assuming that the EIP corresponds to a given size of the oocysts, we can model the
effect of $\gamma$ on $n$ as so:

$$
\frac{1}{1 - \gamma(t)}n
$$

With this established, let's now pull out the data from Figure 5A:

```{r}
oocysts_size <- reading_exp_data("percentage_inhibition_size2.rds")
```

and create a function `gamma()` on the percentage $\gamma(t)$ decrease in oocysts
size as a function of time $t$ post drug administration:

```{r}
gamma <- data2function(oocysts_size)
```

And let's visualize this function $\gamma(t)$ together with the experimental data:

```{r}
plot_experimental_data(oocysts_size, ylim = c(-.65, .65),
                       ylab = bquote(.("sporozoite size reduction factor") ~ gamma))
lines2(xs, gamma(xs))
```

### Combining the 3 effects

In this section we combine the 3 effects reviewed above into a reduction effect of the
basic reproduction ratio $R_0$. If we assume that all the mosquitoes feed on people who
received malarone $t$ time units ago, the reduction factor $\delta(t)$ of $R_0$ reads:

$$
\delta(t, g, n, L) = (1 - \alpha(t))\frac{f((1 - \beta(t))L)}{f(L)}e^{-gn\gamma(t)/(1-\gamma(t))}
$$
where $L$ is the mean sporozoite load in absence of malarone. The corresponding R code:

```{r}
delta <- function(t, L, g, n) {
  (1 - alpha(t)) *
    exp(- g * n * gamma(t) / (1 - gamma(t))) *
    f((1 - beta(t)) * L) / f(L)
}
```

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $t$ should be expressed in hours.

If we now assume that all the mosquitoes feed on people who were treated sometimes
during the past $D$ time units, then the mean reduction factor of $R_0$ reads:

$$
\lambda(g, n, L, D) = \frac{1}{D}\int_0^D\delta(t, g, n, L)dt
$$ {#eq-lambda}

Ideally, we'd like $D$ to be large enough so that $\delta(t = D, g, n, L)\simeq 0$. The
corresponding R code is:

```{r}
lambda <- function(D, L, g, n, nb = 1e6) {
  trapezoid(function(x) delta(x, L, g, n), 0, D, nb) / D
}
```

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $D$ should be expressed in hours.

#### Mass treatment

Mass treatment is not affected by the epidemiological context

$$
\pi(\mu, g, n, L, D) = 1 - (1 - \lambda(g, n, L, D))\mu
$$

The corresponding R codes:

```{r}
pi1 <- function(D, L, g, n, mu) mu * (1 - lambda(D, L, g, n))
```

and

```{r}
pi2 <- function(lmbd, mu) mu * (1 - lmbd)
```

Given that $\lambda(g, n, L, D)$ is what takes time to compute, it might sometimes be
advantageous to `pi2()` instead `pi1()` (see below).

#### Treatment of infected

Finally, let's put the effect of malarone into an epidemiological context. If $\bar{X}$
is the disease prevalence and $r$ the human recovery rate, then we can approximate the
disease incidence by $\bar{X}r$. If $\tau$ is the treatment rate (*i.e.* the
proportion of new cases who receive treatment), then the treatment incidence is
$\tau\bar{X}r$. This means that the proportion of people who received treatment
sometimes during the past $D$ time units is $1 - e^{-\tau\bar{X}rD}$ and that the
mean reduction factor of $R_0$ reads:

$$
\rho(g, n, L, \tau, \bar{X}, r, D) = 1 - \left(1 - e^{-\tau\bar{X}rD}\right)(1 - \lambda(g, n, L, D))
$$ {#eq-rho}

The corresponding R codes:

```{r}
rho1 <- function(D, L, g, n, X, tau, r) {
  1 - (1 - exp(- tau * X * r * D)) * (1 - lambda(D, L, g, n))
}
```

and 

```{r}
rho2 <- function(lmbd, D, X, tau, r) {
  1 - (1 - exp(- tau * X * r * D)) * (1 - lmbd)
}
```

Given that $\lambda(g, n, L, D)$ is what takes time to compute, it might sometimes be
advantageous to `rho2()` instead `rho1()` (see below).

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $r$ and $D$ should be both expressed in hours.

## Numerical analysis

Table of parameters here.

### Reducing factor $\delta(t)$

The $R_0$ reducing factor $\rho(t)$ is computed by assuming that all the mosquitoes 
feed on people $t$ hours after drug administration. For a mosquito life expectancy
$1/g$ of 14 days, an EPI $n$ of 7 days, a sporozoite load of 60,000, if the all the
mosquitoes feed on people 100 hours after drug administration, the $R_0$ reducing
factor $\delta$ is:

```{r}
(effect_at_t100 <- delta(t = 100, L = 6e4, g = 1 / 14, n = 7))
```

More generally, if all the mosquitoes feed on people $t$ hours after drug 
administration, the $R_0$ reducing factor looks like:

```{r}
xs3 <- seq(0, 24 * 28, le = 2^10)
ys <- delta(t = xs3, L = 6e4, g = 1 / (14 * 24), n = 7 * 24)
plotl(xs3, ys, ylim = 0:1,  
      xlab = "time post drug administration (hours)",
      ylab = bquote(R[0] ~ .("reduction factor") ~ delta))
abline(v = 100, col = 4)
abline(h = effect_at_t100, col = 4)
points(100, effect_at_t100, col = 4)
```

where the blue point and lines show the case where all the mosquitoes feed of people
100 hours after drug administration.

### Mass treatment

The $R_0$ reducing factor $\lambda(t)$ is computed by assuming that all the mosquitoes
feed on people that were treated sometimes during the past $D$ time units. Considering
that all the mosquitoes feed of people who received treatment in the past 28 days, the
$R_0$ reducing factor $\lambda$ is:

```{r eval = FALSE}
(mean_effect_over28days <- lambda(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7))
```

```{r include = FALSE}
if (file_exists("mean_effect_over28days.rds")) {
  mean_effect_over28days <- readRDS3("mean_effect_over28days.rds")
  print(mean_effect_over28days)
} else {
  (mean_effect_over28days <- lambda(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7))
  saveRDS2(mean_effect_over28days, "mean_effect_over28days.rds")
}
```

(takes ca 1.5" ) which, on the previous plot, looks like:

```{r}
plot(xs3, ys, ylim = 0:1, xaxs = "i", yaxs = "i", type = "n",
     xlab = "time post drug administration (hours)",
     ylab = bquote(R[0] ~ .("reduction factor") ~ delta))
polygon(c(xs3[1], xs3, tail(xs3, 1)), c(0, ys, 0),
        border = NA, col = adjustcolor(4, .2))
lines2(xs3, ys)
abline(h = mean_effect_over28days, col = 4, lty = 2, lwd = lwd_val)
text(mean(xs3), 1.04 * mean_effect_over28days, col = 4,
     bquote(.("mean") ~ R[0] ~ .("reduction factor") ~ lambda))
box(bty = "o")
```

Let's now look at what a mass treatment would look like

```{r}
compute_lambda_val <- function(D_val, gn_val, L_val) {
  out <- with(expand.grid(gn_val, L_val),
              map2(Var1, Var2, ~ map_dbl(D_val, lambda, L = .y, g = 1, n = .x)))
  attr(out, "params") <- list(D_val = D_val, gn_val = gn_val, L_val = L_val)
  out
}
```

4'00":

```{r eval = FALSE}
lambda_vals <- compute_lambda_val(D_val = 1:28 * 24,
                                  gn_val = c(.4, .7, 1),
                                  L_val = c(2, 6) * 1e4)
```

```{r include = FALSE}
if (file_exists("lambda_vals.rds")) {
  lambda_vals <- readRDS3("lambda_vals.rds")
} else {
  lambda_vals <- compute_lambda_val(D_val = 1:28 * 24,
                                    gn_val = c(.4, .7, 1),
                                    L_val = c(2, 6) * 1e4)
  saveRDS2(lambda_vals, "lambda_vals.rds")
}
```


```{r}
plot_mass_treatment <- function(x, y) {
  plot(x, y, ylim = 0:1, type = "n",
       xlab = "days between intakes",
       ylab = bquote(R[0] ~ .("reduction factor") ~ pi))
  walk(seq(0, 1, .1), ~ lines2(x, 1 - (1 - y) * .x))
}
```

```{r fig.width = 8, fig.height = 5.25, margin1 = FALSE, margin3 = TRUE}
params <- attr(lambda_vals, "params")
mtext2 <- function(x) mtext(paste("EPI =", format(x, nsmall = 1), "x e(0)"), 3, .5)
mtext3 <- function(x) mtext(paste("L =", format(x, big.mark = ",")), 2, 2.5)
plot_mass_treatment2 <- function(y) plot_mass_treatment(params$D_val / 24, y)

mcx <- 3 / 2
op <- par(mfrow = c(2, 3), mex = mcx, cex.axis = mcx, cex.lab = mcx, cex.main = mcx)

plot_mass_treatment2(lambda_vals[[1]])
mtext3(params$L_val[1])
mtext2(params$gn_val[1])
plot_mass_treatment2(lambda_vals[[2]])
mtext2(params$gn_val[2])
plot_mass_treatment2(lambda_vals[[3]])
mtext2(params$gn_val[3])
plot_mass_treatment2(lambda_vals[[4]])
mtext3(params$L_val[2])
plot_mass_treatment2(lambda_vals[[5]])
plot_mass_treatment2(lambda_vals[[6]])
par(op)
```

```{r}
plot_mass_treatment2(lambda_vals[[3]])
```


### Treatment of infected

If we take the example of the previous section and put it into an epidemiological
context of a prevalence of 10% and assuming that 90% of the people infected are given
a treatment, the $R_0$ reducing factor $\rho$ is:

```{r eval = FALSE}
rho1(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7, X = .1, tau = .9, r = 1 / (14 * 24))
```

```{r include = FALSE}
if (file_exists("rho1_val.rds")) {
  rho1_val <- readRDS3("rho1_val.rds")
} else {
  (rho1_val <- rho1(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7, X = .1, tau = .9,
                    r = 1 / (14 * 24)))
  saveRDS2(rho1_val, "rho1_val.rds")
}
```

(which takes 1.5"). Alternatively (and faster):

```{r}
rho2(mean_effect_over28days, D = 28 * 24, X = .1, tau = .9, r = 1 / (14 * 24))
```

A function that computes the $\rho$ values:

```{r}
compute_rho_val <- function(X_val, tau_val, gn_val, L_val, D, L, r, nb) {
  compute_rho_val_ <- function(gn, L) {
    lambda_val <- lambda(D, L, 1, gn, nb)
    expand.grid(X_val, tau_val) |>
      with(map2_dbl(Var1, Var2, rho2, lmbd = lambda_val, D = D, r = r)) |> 
      matrix(length(X_val)) |> 
      t() |> 
      as.data.frame()
  }
  out <- with(expand.grid(gn_val, L_val), map2(Var1, Var2, compute_rho_val_))
  attr(out, "params") <- list(X_val = X_val, tau_val = tau_val, gn_val = gn_val,
                              L_val = L_val, D = D, L = L, r = r, nb = nb)
  out
}
```

A function that plots the computed $\rho$ values as a function of the proportion $\tau$
of infected people that are treated (i.e. one slot of the output of
`compute_rho_val()`:

```{r}
abline3 <- function(...) abline(..., col = "lightgrey")
abline4 <- function(...) abline3(..., lwd = lwd_val)

plot_rho <- function(tau, X, rho_val, ylim = NULL,
                     ylab = bquote(R[0] ~ .("reduction factor") ~ rho),
                     hlines1 = seq(0, 1, .1), hlines2 = seq(0, 1, .05)) {
  if (is.null(ylim)) ylim <- 0:1
  plot(rep(tau, length(X)), unlist(rho_val), type = "n", ylim = ylim, ylab = ylab,
       xlab = bquote(.("proportion") ~ tau ~ .("treated")), xaxs = "i", yaxs = "i")
  abline3(v = seq(0, 1, .05))
  abline3(h = hlines2)
  abline4(v = seq(0, 1, .1))
  abline4(h = hlines1)
  box(bty = "o")
  walk(rho_val, lines2, x = tau)
}
```

A function that plots in a multi-panel figure the 6 slots of the output of
`compute_rho_val()`:

```{r}
plot_multipanel <- function(rho_val, ylim = NULL,
                            ylab = bquote(R[0] ~ .("reduction factor") ~ rho),
                            hlines1 = seq(0, 1, .1), hlines2 = seq(0, 1, .05)) {
  if (is.null(ylim)) ylim <- 0:1
  mcx <- 3 / 2
  params <- attr(rho_val, "params")
  gn_val <- params$gn_val
  L_val <- params$L_val
  
  plot_rho2 <- function(y) {
    plot_rho(params$tau_val, params$X_val, y, ylim, ylab, hlines1, hlines2)
  }
  
  mtext2 <- function(x) mtext(paste("EPI =", format(x, nsmall = 1), "x e(0)"), 3, .5)
  mtext3 <- function(x) mtext(paste("L =", format(x, big.mark = ",")), 2, 2.5)
  
  op <- par(mfrow = c(2, 3), mex = mcx, cex.axis = mcx, cex.lab = mcx, cex.main = mcx)
  plot_rho2(rho_val[[1]])
  mtext3(L_val[1])
  mtext2(gn_val[1])
  plot_rho2(rho_val[[2]])
  mtext2(gn_val[2])
  plot_rho2(rho_val[[3]])
  mtext2(gn_val[3])
  plot_rho2(rho_val[[4]])
  mtext3(L_val[2])
  plot_rho2(rho_val[[5]])
  plot_rho2(rho_val[[6]])
  par(op)
}
```

Let's compute some $\rho$ values (it takes 10"):

```{r eval = FALSE}
rho_val1 <- compute_rho_val(X_val = seq(0, 1, .1),
                            tau_val = seq2(0, 1),
                            gn_val = c(.4, .7, 1),
                            L_val = c(2, 6) * 1e4,
                            D = 28 * 24,
                            L = 6e4,
                            r = 1 / (14 * 24),
                            nb = 1e6)
```

```{r include = FALSE}
if (file_exists("rho_val1.rds")) {
  rho_val1 <- readRDS3("rho_val1.rds")
} else {
  rho_val1 <- compute_rho_val(X_val = seq(0, 1, .1),
                              tau_val = seq2(0, 1),
                              gn_val = c(.4, .7, 1),
                              L_val = c(2, 6) * 1e4,
                              D = 28 * 24,
                              L = 6e4,
                              r = 1 / (14 * 24),
                              nb = 1e6)
  saveRDS2(rho_val1, "rho_val1.rds")
}
```

Which gives:

```{r fig.width = 8, fig.height = 5.25, margin1 = FALSE, margin3 = TRUE}
plot_multipanel(rho_val1)
```

If we want to look at a specific example of $R_0$, we need to acknowledge that,
everything else being constant, $R_0$ is proportional to the probability $P_e$ of an
infected mosquito to become infectious:

$$
R_0 \propto e^{-gn}
$$

with this being considered, let's now consider for example a reference value of
$R_0 = 5$ in absence of treatment and when the EPI $n$ is equal to the mosquito life
expectancy $e(0) = 1/g$.

```{r fig.width = 8, fig.height = 5.25, margin1 = FALSE, margin3 = TRUE}
R0o <- 5
ymax <- 10
rho_val2 <- rho_val1
rho_val2[c(1, 4)] <- map(rho_val2[c(1, 4)],
                          function(x) map(x, ~ .x * R0o * exp(1 - .4)))
rho_val2[c(2, 5)] <- map(rho_val2[c(2, 5)],
                         function(x) map(x, ~ .x * R0o * exp(1 - .7)))
rho_val2[c(3, 6)] <- map(rho_val2[c(3, 6)], function(x) map(x, ~ .x * R0o))
plot_multipanel(rho_val2, c(0, ymax), bquote(R[0]), seq(0, ymax, 1), seq(0, ymax, .5))
```

Panel A

```{r}
colors_lines <- hcl.colors(11, "YlOrRd", rev = TRUE)

params1 <- attr(lambda_vals, "params")
x <- params1$D_val / 24
y <- lambda_vals[[3]]
plot(x, y, ylim = 0:1, type = "n", xaxs = "i", yaxs = "i",
     xlab = "days D between intakes", ylab = bquote(R[0] ~ .("reduction factor")))
abline4(v = 2:27)
abline3(h = seq(0, 1, .05))
abline4(h = seq(0, 1, .1))
box(bty = "o")
walk2(seq(0, 1, .1), colors_lines, ~ lines(x, 1 - (1 - y) * .x, col = .y, lwd = 3))
```

Panel B

```{r}
params2 <- attr(rho_val1, "params")

tau <- params2$tau_val
X <- params2$X_val
rho_val <- rho_val1[[3]]
plot(rep(tau, length(X)), unlist(rho_val), type = "n", ylim = 0:1,
     ylab = bquote(R[0] ~ .("reduction factor")),
     xlab = bquote(.("proportion") ~ tau ~ .("treated")), xaxs = "i", yaxs = "i")
abline3(v = seq(0, 1, .05))
abline3(h = seq(0, 1, .05))
abline4(v = seq(0, 1, .1))
abline4(h = seq(0, 1, .1))
box(bty = "o")
walk2(rho_val, colors_lines, ~ lines(tau, .x, col = .y, lwd = 3))
```

```{r}
image(matrix(1:11), col = colors_lines)
```



