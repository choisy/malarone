---
title: "Some epidemiological effects of malarone"
number-sections: true
format:
  html:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
bibliography: references.bib
csl: the-american-naturalist.csl
---

In this analysis we use the formalism of @smith_statics_2004.

## Parameters

The path to the data:

```{r}
path2data <- paste0(Sys.getenv("HOME"), "/Library/CloudStorage/",
                    "OneDrive-OxfordUniversityClinicalResearchUnit/",
                    "GitHub/choisy/malarone/")
```

```{r include = FALSE}
file_exists <- function(x) file.exists(paste0(path2data, "cache/", x))
readRDScache <- function(x) readRDS(paste0(path2data, "cache/", x))
saveRDScache <- function(obj, file) saveRDS(obj, paste0(path2data, "cache/", file))
```

Whether or not to force the effects to be equal to 0 at $t = 28$ days (in practice it
does not change things much anyway):

```{r}
t28_0 <- TRUE
```

## Packages

Required packages:

```{r}
required_packages <- c("readr", "readxl", "dplyr", "purrr", "stringr")
```

Installing those that are not installed yet:

```{r}
to_inst <- required_packages[! required_packages %in% installed.packages()[,"Package"]]
if (length(to_inst)) install.packages(to_inst)
```

Loading some for interactive use:

```{r message = FALSE}
library(dplyr)
library(purrr)
```


## Functions

Tuning some base functions:

```{r}
lwd_val <- 2
seq2 <- function(...) seq(..., le = 512)
abline2 <- function(...) abline(..., col = "grey")
lines2 <- function(...) lines(..., col = 2, lwd = lwd_val)
segments2 <- function(...) segments(..., col = 4, lwd = lwd_val)
plot2 <- function(...) plot(..., col = 4, pch = 3, lwd = lwd_val)
plotl <- function(...) plot(..., type = "l", col = 2, lwd = lwd_val)
arrows2 <- function(...) arrows(..., col = 3, length = .15, lwd = lwd_val)
readRDS2 <- function(f, ...) tibble::as_tibble(readRDS(paste0(path2data, f), ...))
```

A function that performs numerical integration using the trapezoid method:

```{r}
trapezoid <- function(f, lower, upper, nb = 1e4) {
  step <- (upper - lower) / nb
  y <- f(seq(lower, upper, le = nb + 1))
  step * (y[1] + 2 * sum(y[-1])) / 2
}
```


## Theoretical results

Here we pull out the most relevant theoretical results from @smith_statics_2004. The
**individual vectorial capacity** (noted $IC$ in @smith_statics_2004 but noted $C$
here) is defined by @saul_cyclical_1990 as the expected number of infectious bites from
a single vector after feeding on an infectious host and reads:

$$
C = c \cdot P_e \cdot S
$$

where $c$ is the **transmission efficiency from human to mosquito** (*i.e.* probability
of becoming infected after feeding on an infectious human), $P_e$ is the
**probability of becoming infectious for an infected mosquito**:

$$
P_e = e^{-gn}
$$
(with $g$ the **mosquito death rate** and $n$ the **EIP**), and $S$ is the
**stability index**, *i.e.* the total number of bites per mosquito during its lifetime:

$$
S = \frac{a}{g}
$$
with $a$ the **mosquito biting rate**, *i.e.* the number of bites per mosquito.
Gathering everything gives:

$$
C = c \cdot e^{-gn}\frac{a}{g}
$$ {#eq-ind_vec_cap}

The **basic reproduction ratio** is the expected number of infected humans per infected
human or, equivalently, the expected number of infected mosquitoes per infected 
mosquito and can be expressed as:

$$
R_0 = \frac{C \cdot b \cdot a \cdot m}{r}
$$

where $C$ is the above-defined individual vectorial capacity, $b$ is the
**transmission efficiency from mosquito to human**, $r$ is the
**recovery rate of humans**, and $m$ is the **ratio of mosquitoes to humans**.

Finally, the proportion $\bar{X}$ of infected humans at equilibrium can be expressed as
a function of $R_0$:

$$
\bar{X} = \frac{R_0 - 1}{R_0 + c S}
$${#eq-prevalence1}

## Experimental results

The experimental results suggest that malarone

1. decreases by the multiplicative factor $1 - \alpha$ ($0 \leq \alpha \leq 1$) the
number of mosquitoes with sporozoites (with $\alpha$ shown on the $y$ axis of
Figure 3B);
2. decreases by the multiplicative factor $1 - \beta$ ($0 \leq \beta \leq 1$) the
sporozoites load in mosquitoes still harboring sporozoites (with $\beta$ shown on
the $y$ axis of Figure 4B);
3. decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$) the
size of oocysts at 7 days post infection (with $\gamma$ shown on the $y$ axis of Figure
5A);
4. has no effect on the mosquito biting rate $a$ (Figure 7A);
5. has no effect on the mosquito death rate $g$ (Figure 7B).

Let's see below how we can integrate these 3 effects $\alpha$, $\beta$ and $\gamma$
into the theoretical equations of the previous section.


### TBA on sporozoites

The transmission-blocking activity on sporozoites converts directly into a similar
reduction of the mean vectorial capacity:

$$
(1 - \alpha(t))\cdot C
$$

where $C$ is the vectorial capacity in absence of malarone and $t$ is the time post
drug administration. Below we generate the function $\alpha(t)$ from the experimental
data of Figure 3B. First we need a function that reads experimental data for the
treatment group:

```{r}
make_reading_exp_data <- function() {
  hours <- c(0, 5, 48, 72)
  days <- c(5, 7, 14, 28)
  hash <- c(setNames(hours, paste0("H", hours)),
            setNames(24 * days, paste0("D", days)))
  function(file) {
    file |>
      readRDS2() |> 
      filter(treatment == "AL+AP") |> 
      mutate(time_hours = hash[stringr::str_remove(time_points, "0")],
             across(Inhibition, ~ .x / 100))
  }
}

reading_exp_data <- make_reading_exp_data()
```

We also need a function that converts such experimental data into a function:

```{r}
data2function <- function(data, correction = t28_0) {
  apply_correction <- function(x) {
    if (correction) return(mutate(x, median_val = c(head(median_val, -1), 0)))
    x
  }
  
  data |> 
    group_by(time_hours) |> 
    summarise(median_val = max(0, median(Inhibition))) |> 
    bind_rows(tibble(time_hours = 0, median_val = 0)) |> 
    arrange(time_hours) |> 
    apply_correction() |> 
    with(function(x, ...) approx(time_hours, median_val, x, ...)$y)
}
```

where `correction = TRUE` means that the value at $t = 28$ days is forced to be equal
to $0$. Let's now pull out the data from Figure 3B:

```{r}
sporozoitsTBA <- reading_exp_data("percentage_inhibition9.rds")
```

and create a function `alpha()` of the percentage $\alpha(t)$ inhibition on sporozoite
infection rate as a function of time $t$ post drug administration:

```{r}
alpha <- data2function(sporozoitsTBA)
```

Let's now visualize this function. For that we first need a function that plots
experimental data:

```{r}
plot_experimental_data <- function(data, ...) {
  with(data, plot2(jitter(time_hours), Inhibition,
                   xlab = "time post drug administration (hours)", ...))
  abline(h = 0)
}
```

With this function `plot_experimental_data()` defined, this is what the $\alpha(t)$
function coded in `alpha()` looks like together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTBA, ylim = c(-1, 1),
                       ylab = expression(paste("sporozoite TBA ", alpha)))
xs <- seq2(0, 700)
lines2(xs, alpha(xs))
```


### TRA on sporozoites

The transmission-reducing activity on sporozoites reads

$$
(1 - \beta(t))\cdot L
$$

where $L$ is the sporozoite load in absence of malarone. Figure 2B from
@aleshnick_experimental_2020 suggests a non-linear relationship between the sporozoite
load and the transmission efficiency from mosquito to human. The effect of $\beta$ on
$b$ is thus modelled as so:

$$
\frac{f((1 - \beta(t))L)}{f(L)}b
$$

where $b$ is the mosquito-to-human transmission efficiency in absence of malarone and 
$f$ is the functional relationship between the sporozoite load and the
mosquito-to-human transmission efficiency documented on Figure 2B of
@aleshnick_experimental_2020 and that we reproduce here:

```{r}
make_f <- function(x1, x2, y1, y2) {
  function(x) {
    purrr::map_dbl(x, function(x) {
                        if (x < x1) return(x * y1 / x1)
                        y1 + (x - x1) * (y2 - y1) / (x2 - x1)
                      })
  }
}

f <- make_f(x1 = 21111, x2 = 1e5, y1 = .285, y2 = .344)
```

And this is what this function $f$ coded in `f()` looks like:

```{r}
xs2 <- seq2(0, 1e5)
plotl(xs2, f(xs2),
      xlab = "salivary gland sporozoite load", ylab = "infection probability")
```

With this defined, let's now pull out the data from Figure 4B:

```{r}
sporozoitsTRA <- reading_exp_data("percentage_inhibition13.rds")
```

and create a function `beta(t)` on the percentage  $\beta(t)$ inhibition on sporozoite
intensity as a function of time $t$ post drug administration:

```{r}
beta <- data2function(sporozoitsTRA)
```

And let's visualize this function $\beta(t)$ together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTRA, ylim = c(-.15, .15),
                       ylab = expression(paste("sporozoite TRA ", beta)))
lines2(xs, beta(xs))
```


### Increase of the EIP

Malarone decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$)
the size of oocysts at 7 dpi. Furthermore, figure 5B from @werling_steroid_2019
suggests a linear relationship between the development time and the oocyst size, which
means that the effect of $\gamma$ on $n$ can be modelled as so:

$$
\frac{1}{1 - \gamma(t)}n
$$

With this established, let's now pull out the data from Figure 5A:

```{r}
oocysts_size <- reading_exp_data("percentage_inhibition_size2.rds")
```

and create a function `gamma()` on the percentage $\gamma(t)$ decrease in oocysts
size as a function of time $t$ post drug administration:

```{r}
gamma <- data2function(oocysts_size)
```

And let's visualize this function $\gamma(t)$ together with the experimental data:

```{r}
plot_experimental_data(oocysts_size, ylim = c(-.65, .65),
                       ylab = expression(paste(
                         "sporozoite size reduction factor ", gamma)))
lines2(xs, gamma(xs))
```

### Combining the 3 effects

The effects $\alpha(t)$ and $\gamma(t)$ modify the individual vectorial capacity $C$ as
so:

$$
(1 - \alpha(t))e^{-gn\gamma(t)/(1-\gamma(t))}C
$$

where $C$ is the individual vectorial capacity in absence of malarone. The three
effects $\alpha(t)$, $\beta(t)$ and $\gamma(t)$ modify the basic reproduction ratio
$R_0$ as so:

$$
(1 - \alpha(t))e^{-gn\gamma(t)/(1-\gamma(t))}\frac{f((1 - \beta(t))L)}{f(L)}R_0
$$
where $L$ and $R_0$ are the mean sporozoite load and the basic reproduction ratio in
absence of malarone. From here we will focus on the effect on $R_0$ and the effect at
time $t$ post drug administration is coded by the following function:

```{r}
effect_at_t <- function(t, L, g, n) {
  (1 - alpha(t)) *
    exp(- g * n * gamma(t) / (1 - gamma(t))) *
    f((1 - beta(t)) * L) / f(L)
}
```

The expected effect of malarone on a mosquito that feeds on a human who is infected and
has taken a treatment, not knowing when, would read:

$$
\frac{1}{D}\int_0^D(1 - \alpha(t))e^{-gn\gamma(t)/(1-\gamma(t))}\frac{f((1 - \beta(t))L)}{f(L)}dt\cdot R_0
$$

where $D = 1/R$ is the mean duration of infection in the human host. The corresponding
R code is:

```{r}
effect_on_treated <- function(D, L, g, n, nb = 1e6) {
  trapezoid(function(x) effect_at_t(x, L, g, n), 0, D, nb) / D
}
```

Finally, if $P$ is the prevalence in the human population and $\tau$ is the proportion
of infected people that are treated, the mean effect of malarone on the basic
reproduction ratio then read:

$$
\left(1 - \tau \bar{X}\cdot\left(1 - \frac{1}{D}\int_0^D(1 - \alpha(t))e^{-gn\gamma(t)/(1-\gamma(t))}\frac{f((1 - \beta(t))L)}{f(L)}dt\right)\right)R_0
$$ {#eq-ind_vec_cap}

with the corresponding R code:

```{r}
mean_effect <- function(D, L, g, n, X, tau) {
  1 - tau * X * (1 - effect_on_treated(D, L, g, n))
}
```

## Numerical analysis

In the numerical exploration below we assume a mosquito life expectancy $1/g$ of 14
days and an EIP $n$ of 7 days. The malarone reducing effect on $R_0$, and considering
only mosquito feeding on people 100 hours after drug administration is:

```{r}
(effect_at_t100 <- effect_at_t(t = 100, L = 6e4, g = 1 / (14 * 24), n = 7 * 24))
```

The malarone reducing effect on $R_0$ considering mosquitoes feeding on people $t$
hours after drug administration looks like:

```{r}
xs3 <- seq(0, 24 * 28, le = 2^10)
plotl(xs3, effect_at_t(t = xs3, L = 6e4, g = 1 / (14 * 24), n = 7 * 24),
      xlab = "time post drug administration (hours)",
      ylab = "individual vectorial capacity reduction effect")
abline(v = 100, col = 4)
abline(h = effect_at_t100, col = 4)
```

The expected malarone reducing effect on $R_0$ considering mosquitoes feeding on people
treated by malarone (but not knowing when) is (takes 1.5"):

```{r}
effect_on_treated(D = 14 * 24, L = 6e4, g = 1 / (14 * 24), n = 7 * 24)
```

The expected malarone reducing effect on $R_0$ considering mosquitoes feeding in a
population with malaria prevalence of 10%, 90% of which are taking drug is:

```{r}
mean_effect(D = 14 * 24, L = 6e4, g = 1 / (14 * 24), n = 7 * 24, X = .1, tau = .9)
```

```{r}
tauP <- seq2(0, 1)
ef <- 1 - tauP * effect_on_treated(D = 14 * 24, L = 6e4, g = 1 / (14 * 24), n = 7 * 24)
plotl(tauP, ef, ylim = 0:1,
      xlab = "prevalence of people who took the drug in the past 14 days",
      ylab = "expected vectorial capacity reducing effect")
```


## Epidemiology

Now that we have characterized the effect of malarone on the vectorial capacity in a
context of a given malaria prevalence in the human population, let's derive the
consequences at the epidemiological equilibrium. In order to better characterize the
epidemiological consequences of the effect of malarone in mosquitoes, we will here
neglect the effect of malarone in humans (*i.e.* malarone is not affecting the human
recovery rate $r = 1/D$).

Let's call $\rho$ the reduction of $R_0$. From @eq-ind_vec_cap we can see that this
reduction naturally depends on the prevalence $\bar{X}$ in the human population:

$$
\rho(\bar{X}) = \left(1 - \tau \bar{X}\cdot\left(1 - \frac{1}{D}\int_0^D(1 - \alpha(t))e^{-gn\gamma(t)/(1-\gamma(t))}\frac{f((1 - \beta(t))L)}{f(L)}dt\right)\right)R_0
$$

The modified value of $R_0'$ of $R_0$ thus also depends on the prevalence $\bar{X}$ in
the human population:

$$
R_0'(\bar{X}) = \rho(\bar{X}) R_0
$${#eq-R0}

Furthermore, according to @eq-prevalence1, a change in $R_0$ will in turn induce a
modification of the prevalence $\bar{X}$ in the human population:

$$
P(R_0') = \frac{R_0' - 1}{R_0' + c S}
$${#eq-prevalence}

The equilibrium of @eq-R0 and @eq-prevalence can be found by reiterating this process
a large number of times. Here is a function that creates the $\rho(P)$ function for
given values of the parameters $D = 1/r$, $L$, $g$, $n$ and $\tau$:

```{r}
make_rho <- function(D, L, g, n, tau) {
  X <- seq2(0, 1)
  tauX <- tau * X
  ef <- 1 - tauX * effect_on_treated(D = 14 * 24, L = 6e4, g = 1 / (14 * 24), n = 7 * 24)
  function(x, ...) approx(X, ef, x, ...)$y
}
```

Let's make one example:

```{r}
rho1 <- make_rho(D = 14 * 24, L = 6e4, g = 1 / (14 * 24), n = 7 * 24, tau = .9)
```

Once we have this `rho1()` function, we can use it in a recursion loop together with
the inverse of @eq-prevalence:

```{r}
recursion <- function(R0o, cS, n, rho) {
  R0 <- P <- numeric(n)
  R0[1] <- R0o
  for (i in 1:(n - 1)) {
    P[i] <- (R0[i] - 1) / (R0[i] + cS)
    R0[i + 1] <- R0o * rho(P[i])
  }
  P[n] <- (R0[n] - 1) / (R0[n] + cS)
  output <- data.frame(R0 = R0, P = P)
  attr(output, "parms") <- list(R0o = R0o, cS = cS, n = n, rho = rho)
  output
}
```

where `R0o` is the value of $R_0$ in absence of treatment in the population and `n` is
the number of iterations of the recursion loop.

```{r}
dynamics1 <- recursion(R0o = 15, cS = 40, n = 1e3, rho = rho1)
```

The following function plots the recursion loop:

```{r}
plot_recursion <- function(x, max_prev = 1) {
  prev_val <- seq2(0, max_prev)
  parms <- attr(x, "parms")
  with(parms, {
    plotl(prev_val, rho(prev_val) * R0o, ylim = c(0, R0o),
          xlab = "prevalence", ylab = "basic reproduction ratio R0")
    lines2(prev_val, (1 + cS * prev_val) / (1 - prev_val))
  })
  nbrows <- nrow(x)
  abline2(v = x$P[1])
  abline2(v = x$P[nbrows])
  abline2(h = x$R0[nbrows])
  with(x, {
    segments2(-1, R0[1], P[1], R0[1])
    for (i in 1:(nbrows - 1)) {
      segments2(P[i], R0[i], P[i], R0[i + 1])
      segments2(P[i], R0[i + 1], P[i + 1], R0[i + 1])
    }
  })
  with(parms, {
    arrows2(0, R0o, 0, x$R0[nbrows])
    arrows2(x$P[1], 0, x$P[nbrows], 0)
  })
}
```

Which gives:

```{r}
plot_recursion(dynamics1)
```


