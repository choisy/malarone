---
title: "Mosquito-mediated epidemiological effects of malarone"
number-sections: true
format:
  html:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
bibliography: references.bib
csl: the-american-naturalist.csl
---

```{r include = FALSE}
knitr::knit_hooks$set(
  margin1 = function(before, options, envir) {
    if (before) par(mgp = c(1.5, .5, 0), bty = "n",
                    plt = c(.105, .97, .15, .95))
    else NULL
  },
  margin2 = function(before, options, envir) {
    if (before) par(mgp = c(1.5, .5, 0), bty = "n",
#                    cex.axis = 3 / 2, cex.lab = 3 / 2,
                    plt = c(.22, .97, .15, .95))
    else NULL
  })

eps <- .8
knitr::opts_chunk$set(margin1    = TRUE,
                      fig.retina = 2,
                      fig.align  = "center",
                      fig.height = eps * 5, # default is 5
                      fig.width = eps * 7) # default is 7
```

In this analysis we use the formalism of @smith_statics_2004.

## Parameters

The path to the data:

```{r}
path2data <- paste0(Sys.getenv("HOME"), "/Library/CloudStorage/",
                    "OneDrive-OxfordUniversityClinicalResearchUnit/",
                    "GitHub/choisy/malarone/")
```

```{r include = FALSE}
file_exists <- function(x) file.exists(paste0(path2data, "cache/", x))
readRDS3 <- function(x) readRDS(paste0(path2data, "cache/", x))
saveRDS2 <- function(object, file) saveRDS(object, paste0(path2data, "cache/", file))
```

Whether or not to force the effects to be equal to $0$ at $t = 28$ days (in practice it
does not change things much anyway):

```{r}
t28_0 <- TRUE
```

## Packages

Required packages:

```{r}
required_packages <- c("readr", "readxl", "dplyr", "purrr", "stringr")
```

Installing those that are not installed:

```{r}
to_inst <- required_packages[! required_packages %in% installed.packages()[,"Package"]]
if (length(to_inst)) install.packages(to_inst)
```

Loading some for interactive use:

```{r message = FALSE}
library(dplyr)
library(purrr)
```


## Functions

Tuning some base functions:

```{r}
lwd_val <- 2
seq2 <- function(...) seq(..., le = 512)
abline2 <- function(...) abline(..., col = "grey")
lines2 <- function(...) lines(..., col = 2, lwd = lwd_val)
segments2 <- function(...) segments(..., col = 4, lwd = lwd_val)
plot2 <- function(...) plot(..., col = 4, pch = 3, lwd = lwd_val)
plotl <- function(...) plot(..., type = "l", col = 2, lwd = lwd_val)
arrows2 <- function(...) arrows(..., col = 3, length = .15, lwd = lwd_val)
readRDS2 <- function(f, ...) tibble::as_tibble(readRDS(paste0(path2data, f), ...))
```

A function that performs numerical integration using the trapezoid method:

```{r}
trapezoid <- function(f, lower, upper, nb = 1e4) {
  step <- (upper - lower) / nb
  y <- f(seq(lower, upper, le = nb + 1))
  step * (y[1] + 2 * sum(y[-1])) / 2
}
```


## Theoretical results

In this section we pull out the most relevant theoretical results from
@smith_statics_2004.

The **individual vectorial capacity** (noted $IC$ in @smith_statics_2004 but noted $C$
here) is defined by @saul_cyclical_1990 as the expected number of infectious bites from
a single vector after feeding on an infectious host and reads:

$$
C = c \cdot P_e \cdot S
$$

where $c$ is the **transmission efficiency from human to mosquito** (*i.e.* probability
of becoming infected after feeding on an infectious human), $P_e$ is the
**probability of becoming infectious for an infected mosquito**:

$$
P_e = e^{-gn}
$$
(with $g$ the **mosquito death rate** and $n$ the **EIP**), and $S$ is the
**stability index**, *i.e.* the total number of bites per mosquito during its lifetime:

$$
S = \frac{a}{g}
$$

with $a$ the **mosquito biting rate**, *i.e.* the number of bites per mosquito.
Gathering everything gives:

$$
C = c \cdot e^{-gn}\frac{a}{g}
$$

The **basic reproduction ratio** is the expected number of infected humans per infected
human or, equivalently, the expected number of infected mosquitoes per infected 
mosquito and can be expressed as:

$$
R_0 = \frac{C \cdot b \cdot a \cdot m}{r}
$$

where $C$ is the above-defined individual vectorial capacity, $b$ is the
**transmission efficiency from mosquito to human**, $r$ is the
**recovery rate of humans**, and $m$ is the **ratio of mosquitoes to humans**.

Finally, the proportion $\bar{X}$ of infected humans at equilibrium can be expressed as
a function of $R_0$:

$$
\bar{X} = \frac{R_0 - 1}{R_0 + c S}
$${#eq-prevalence1}

## Experimental results

The experimental results suggest that malarone

1. decreases by the multiplicative factor $1 - \alpha$ ($0 \leq \alpha \leq 1$) the
number of mosquitoes with sporozoites (with $\alpha$ shown on the $y$ axis of
Figure 3B);
2. decreases by the multiplicative factor $1 - \beta$ ($0 \leq \beta \leq 1$) the
sporozoites load in mosquitoes still harboring sporozoites (with $\beta$ shown on
the $y$ axis of Figure 4B);
3. decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$) the
size of oocysts at 7 days post infection (with $\gamma$ shown on the $y$ axis of Figure
5A);
4. has no effect on the mosquito biting rate $a$ (Figure 7A);
5. has no effect on the mosquito death rate $g$ (Figure 7B).

Let's see below how we can integrate these 3 effects $\alpha$, $\beta$ and $\gamma$
into the theoretical equations of the previous section.


### TBA on sporozoites

The transmission-blocking activity on sporozoites converts directly into a similar
reduction of the mean individual vectorial capacity:

$$
(1 - \alpha(t))\cdot C
$$

where $C$ is the vectorial capacity in absence of malarone and $t$ is the time post
drug administration. Below we generate the function $\alpha(t)$ from the experimental
data of Figure 3B. First we need a function that reads experimental data for the
treatment group:

```{r}
make_reading_exp_data <- function() {
  hours <- c(0, 5, 48, 72)
  days <- c(5, 7, 14, 28)
  hash <- c(setNames(hours, paste0("H", hours)),
            setNames(24 * days, paste0("D", days)))
  function(file) {
    file |>
      readRDS2() |> 
      filter(treatment == "AL+AP") |> 
      mutate(time_hours = hash[stringr::str_remove(time_points, "0")],
             across(Inhibition, ~ .x / 100))
  }
}

reading_exp_data <- make_reading_exp_data()
```

We also need a function that converts such experimental data into a function:

```{r}
data2function <- function(data, correction = t28_0) {
  apply_correction <- function(x) {
    if (correction) return(mutate(x, median_val = c(head(median_val, -1), 0)))
    x
  }
  
  data |> 
    group_by(time_hours) |> 
    summarise(median_val = max(0, median(Inhibition))) |> 
    bind_rows(tibble(time_hours = 0, median_val = 0)) |> 
    arrange(time_hours) |> 
    apply_correction() |> 
    with(function(x, ...) approx(time_hours, median_val, x, ...)$y)
}
```

where `correction = TRUE` means that the value at $t = 28$ days is forced to be equal
to $0$. Let's now pull out the data from Figure 3B:

```{r}
sporozoitsTBA <- reading_exp_data("percentage_inhibition9.rds")
```

and create a function `alpha()` of the percentage $\alpha(t)$ inhibition on sporozoite
infection rate as a function of time $t$ post drug administration:

```{r}
alpha <- data2function(sporozoitsTBA)
```

Let's now visualize this function. For that we first need a function that plots
experimental data:

```{r}
plot_experimental_data <- function(data, ...) {
  with(data, plot2(jitter(time_hours), Inhibition,
                   xlab = "time post drug administration (hours)", ...))
  abline(h = 0)
}
```

With this function `plot_experimental_data()` defined, this is what the $\alpha(t)$
function coded in `alpha()` looks like together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTBA, ylim = c(-1, 1),
                       ylab = expression(paste("sporozoite TBA ", alpha)))
xs <- seq2(0, 700)
lines2(xs, alpha(xs))
```


### TRA on sporozoites

The transmission-reducing activity on sporozoites reads

$$
(1 - \beta(t))\cdot L
$$

where $L$ is the sporozoite load in absence of malarone. Figure 2B from
@aleshnick_experimental_2020 suggests a non-linear relationship between the sporozoite
load and the transmission efficiency from mosquito to human. The effect of $\beta$ on
$b$ is thus modelled as so:

$$
\frac{f((1 - \beta(t))L)}{f(L)}b
$$

where $b$ is the mosquito-to-human transmission efficiency in absence of malarone and 
$f$ is the functional relationship between the sporozoite load and the
mosquito-to-human transmission efficiency documented on Figure 2B of
@aleshnick_experimental_2020 and that we reproduce here:

```{r}
make_f <- function(x1, x2, y1, y2) {
  function(x) {
    purrr::map_dbl(x, function(x) {
                        if (x < x1) return(x * y1 / x1)
                        y1 + (x - x1) * (y2 - y1) / (x2 - x1)
                      })
  }
}

f <- make_f(x1 = 21111, x2 = 1e5, y1 = .285, y2 = .344)
```

And this is what this function $f$ coded in `f()` looks like:

```{r}
xs2 <- seq2(0, 1e5)
plotl(xs2, f(xs2),
      xlab = "salivary gland sporozoite load", ylab = "infection probability")
```

With this defined, let's now pull out the data from Figure 4B:

```{r}
sporozoitsTRA <- reading_exp_data("percentage_inhibition13.rds")
```

and create a function `beta(t)` on the percentage  $\beta(t)$ inhibition on sporozoite
intensity as a function of time $t$ post drug administration:

```{r}
beta <- data2function(sporozoitsTRA)
```

And let's visualize this function $\beta(t)$ together with the experimental data:

```{r}
plot_experimental_data(sporozoitsTRA, ylim = c(-.15, .15),
                       ylab = expression(paste("sporozoite TRA ", beta)))
lines2(xs, beta(xs))
```


### Increase of the EIP

Malarone decreases by the multiplicative factor $1 - \gamma$ ($0 \leq \gamma \leq 1$)
the size of oocysts at 7 dpi. Furthermore, figure 5B from @werling_steroid_2019
suggests a linear relationship between the development time and the oocyst size. By
assuming that the EIP corresponds to a given size of the oocysts, we can model the
effect of $\gamma$ on $n$ as so:

$$
\frac{1}{1 - \gamma(t)}n
$$

With this established, let's now pull out the data from Figure 5A:

```{r}
oocysts_size <- reading_exp_data("percentage_inhibition_size2.rds")
```

and create a function `gamma()` on the percentage $\gamma(t)$ decrease in oocysts
size as a function of time $t$ post drug administration:

```{r}
gamma <- data2function(oocysts_size)
```

And let's visualize this function $\gamma(t)$ together with the experimental data:

```{r}
plot_experimental_data(oocysts_size, ylim = c(-.65, .65),
                       ylab = expression(paste(
                         "sporozoite size reduction factor ", gamma)))
lines2(xs, gamma(xs))
```

### Combining the 3 effects

In this section we combine the 3 effects reviewed above into a reduction effect of the
basic reproduction ratio $R_0$. If we assume that all the mosquitoes feed on people who
received malarone $t$ time units ago, the reduction factor $\delta(t)$ of $R_0$ reads:

$$
\delta(t, g, n, L) = (1 - \alpha(t))\frac{f((1 - \beta(t))L)}{f(L)}e^{-gn\gamma(t)/(1-\gamma(t))}
$$
where $L$ is the mean sporozoite load in absence of malarone. The corresponding R code:

```{r}
delta <- function(t, L, g, n) {
  (1 - alpha(t)) *
    exp(- g * n * gamma(t) / (1 - gamma(t))) *
    f((1 - beta(t)) * L) / f(L)
}
```

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $t$ should be expressed in hours.

If we now assume that all the mosquitoes feed on people who were treated sometimes
during the past $D$ time units, then the mean reduction factor of $R_0$ reads:

$$
\lambda(g, n, L, D) = \frac{1}{D}\int_0^D\delta(t, g, n, L)dt
$$
Ideally, we'd like $D$ to be large enough so that $\delta(t = D, g, n, L)\simeq 0$. The
corresponding R code is:

```{r}
lambda <- function(D, L, g, n, nb = 1e6) {
  trapezoid(function(x) delta(x, L, g, n), 0, D, nb) / D
}
```

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $D$ should be expressed in hours.

Finally, assuming that mosquitoes feed on treated individuals with a probability equal
to the proportion $\tau\bar{X}rD$ of individuals who were treated sometimes during the
past $D$ time units, then the mean reduction factor of $R_0$ reads:

$$
\rho(g, n, L, \tau, \bar{X}, r, D) = 1 - (1 - \lambda(g, n, L, D))\tau\bar{X}rD
$$

where $\bar{X}$ is the disease prevalence in the human population, $r$ is the human
recovery rate and $\tau$ is the proportion of infected that are treated with malarone.
The corresponding R code is:

```{r}
rho <- function(D, L, g, n, X, tau, r) {
  1 - tau * X * r * D * (1 - lambda(D, L, g, n))
}
```

**Note 1:** $g$ and $n$ should be expressed in the same time units.  
**Note 2:** $r$ and $D$ should be both expressed in hours.

## Numerical analysis

Table of parameters here.

In the numerical exploration below we assume a mosquito life expectancy $1/g$ of 14
days and an EIP $n$ of 7 days. The malarone reducing effect on $R_0$, and considering
only mosquito feeding on people 100 hours after drug administration is:

```{r}
(effect_at_t100 <- delta(t = 100, L = 6e4, g = 1 / 14, n = 7))
```

The malarone reducing effect on $R_0$ considering mosquitoes feeding on people $t$
hours after drug administration looks like:

```{r}
xs3 <- seq(0, 24 * 28, le = 2^10)
plotl(xs3, delta(t = xs3, L = 6e4, g = 1 / (14 * 24), n = 7 * 24), ylim = 0:1,  
      xlab = "time post drug administration (hours)",
      ylab = "R0 reduction factor delta")
abline(v = 100, col = 4)
abline(h = effect_at_t100, col = 4)
```

The expected malarone reducing effect on $R_0$ considering mosquitoes feeding only on
people treated by malarone sometimes in the past 28 days is:

```{r}
lambda(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7)
```

The expected malarone reducing effect on $R_0$ considering mosquitoes feeding in a
population with malaria prevalence of 10%, 90% of which are taking drug is:

```{r}
rho(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7, X = .1, tau = .9, r = 1 / (14 * 24))
```

```{r}
prev_treated <- seq2(0, 1)
ef <- 1 - prev_treated * (1 - lambda(D = 28 * 24, L = 6e4, g = 1 / 14, n = 7))
plotl(prev_treated, ef, ylim = 0:1,
      xlab = "prevalence of people who took the drug in the past 28 days",
      ylab = "R0 reduction factor rho")

abline(v = .9 * .1 * 28 * 24 / (14 * 24), col = 4)
abline(h = .9644393, col = 4)
```


## Epidemiology

From a given $R_0$, a given prevalence $\bar{X}$ and a given proportion $\tau$ of
infected people that are treated, we can compute the number of human infections 
averted per person treated as so:

$$
\Delta(\bar{X}, R_0, \tau |\vec\theta) = \frac{(1 - \bar{X})(1 - \rho(\bar{X}, \tau|\vec\theta))R_0}{((1-(1-\rho(\bar{X}, \tau|\vec\theta))\bar{X})R_0 - 1)\tau}
$$

where $\vec\theta = [g,n,L,r,D]^T$. Let's now visualize $\Delta$ as a function of
$R_0$, $\bar{X}$ and $\tau$ for given values of $g$, $n$, $L$, $r$ and $D$. First the
fixed parameters values:

```{r}
g <- 1 / 14  # same unit as n
n <- 7  # same unit as g
L <- 6e4
D <- 28 * 24  # in hours
r <- 1 / (14 * 24)  # in hours
```

Let's now compute the $\Delta$ values for a 3D figure:

```{r message = FALSE}
tau <- c(.001, seq(.1, 1, .1))
X3D <- c(.01, .05, seq(.1, .9, .1))
R0 <- c(5, 10, 15)

lambda_val <- lambda(D, L, g, n, nb = 1e6)  # that's the bit that takes the most time

rho2 <- function(D, X, tau, r) 1 - tau * X * r * D * (1 - lambda_val)

Delta2 <- function(X, R0, D, tau, r) {
  rho_val <- rho2(D, X, tau, r)
  ((1 - X) * (1 - rho_val) * R0) / (((1 - (1 - rho_val) * X) * R0 - 1) * tau)
}

Delta3D <- map(R0, ~ map_dfc(X3D, Delta2, .x, D, tau, r))
```

The 3D figure:

```{r}
persp2 <- function(x, y, z, ...) {
  persp(x, y, as.matrix(z), theta = 65, col = NA,
        zlim = c(0, max(unlist(Delta3D))), ...)
}

persp3 <- function(...) {
  persp2(..., axes = FALSE, box = FALSE)
  par(new = TRUE)
}

epsilon <- .05
opar <- par(plt = c(epsilon, 1 - epsilon, epsilon, 1 - epsilon))
persp3(tau, X3D, Delta3D[[1]], border = 2)
persp3(tau, X3D, Delta3D[[2]], border = 3)
persp2(tau, X3D, Delta3D[[3]], border = 4,
       xlab = "treatment rate",
       ylab = "prevalence",
       zlab = "inf. prevented per treated")
par(opar)
```

Computing the $\Delta$ values for a 2D figure (takes 17"):

```{r eval = FALSE}
X2D <- seq2(.1, .9)
Delta2D <- map(R0,
               ~ map_dfc(X2D, Delta2, .x, D, tau, r) |>
                 t() |>
                 as.data.frame())
```

```{r include = FALSE}
X2D <- seq2(.1, .9)

if (file_exists("Delta2D.rds")) {
  Delta2D <- readRDS3("Delta2D.rds")
} else {
  Delta2D <- map(R0,
                 ~ map_dfc(X2D, Delta2, .x, D, tau, r) |>
                   t() |>
                   as.data.frame())
  saveRDS2(Delta2D, "Delta2D.rds")
}
```

The 2D figure:

```{r fig.width = 8, fig.height = 3, margin1 = FALSE, margin2 = TRUE}
plot2D <- function(x, ...) {
  plot(rep(X2D, length(x)), unlist(x), type = "n",
       xlim = 0:1, ylim = c(0, max(unlist(Delta2D))),
       xlab = "prevalence", ylab = "infections prevented per treated", ...)
  walk(x, lines, x = X2D, ...)
}

mcx <- 3 / 2
opar <- par(mfrow = c(1, 3), mex = mcx, cex.axis = mcx, cex.lab = mcx, cex.main = mcx)
for (i in 1:3) {
  plot2D(Delta2D[[i]], col = i + 1)
  title(bquote(R[0] ~ "=" ~ .(R0[i])), line = 0)
}
par(opar)
```


